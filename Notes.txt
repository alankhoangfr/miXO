To go to production
1. Go into the client folder and do npm run build
2. In the server.js
		a. change the port to 8080
		b.app.use(express.static('client/build'));
		c. app.get('*', (req, res) => {
			res.sendFile(path.resolve(__dirname, 'client', 'build', 'index.html'));
			});
3. In the dbpool.js
		a.change the script from development to production

4. go to the gcloud sdk google shell and make sure you have logged in
5. In the folder directory do gcloud app deploy




Also go to console
Create an gmail acccount
Create a project in google cloud platform
create an instance in google app engine

-->gcloud init
then login and choose the project



Create the instance in googleSql
-remember the instance name must all be lower case and no characters

In the google cloud platform of the project, enable app for Cloud SQL Admin API

perform these instruction

Go to the IAM & admin Service accounts page.
Select the project that has your App Engine application.
Find App Engine default service account and copy the email address under it (xxxx@appspot.gserviceaccount.com).
Using the top-left project menu, return to the project that contains this SQL instance (mixov2).
Go to the IAM & admin IAM page.
Click Add, enter the email address as the member, and choose Cloud SQL Client as the role. Then click Add.


then update the app.yaml

app.yaml with alankhoangfr@gmail.com

runtime: nodejs
env: flex
env_variables:
  SQL_USER: "Akleg"
  SQL_PASSWORD: "alan123456"
  SQL_DATABASE: "database" //db name must be lower case and no characters
  INSTANCE_CONNECTION_NAME: "mixov1:europe-west3:mixodatabase"
beta_settings:
  cloud_sql_instances: "mixov1:europe-west3:mixodatabase"

manual_scaling:
  instances: 1

resources:
  cpu: .5
  memory_gb: 0.5
  disk_size_gb: 10

handlers:
  - url: /
    static_files: client/build/index.html
    upload: client/build/index.html
  - url: /
    static_dir: client/build

  Then 
  -->gcloud app deploy